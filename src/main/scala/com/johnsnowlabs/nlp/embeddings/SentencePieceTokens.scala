package com.johnsnowlabs.nlp.embeddings

import java.io.File

import com.johnsnowlabs.ml.tensorflow._
import com.johnsnowlabs.nlp._
import com.johnsnowlabs.nlp.annotators.common._
import com.johnsnowlabs.storage.HasStorageRef
import org.apache.spark.broadcast.Broadcast
import org.apache.spark.ml.param.{IntArrayParam, IntParam, Param, ParamMap, Params}
import org.apache.spark.ml.util.Identifiable
import org.apache.spark.sql.{DataFrame, SparkSession}


// SENTENCE PIEC IS A TOKENIZE but also an ENCODER. SO what we call it lol.
// Because WordpiecEncoder  is only an encoder
// SHould it be SentencePieceTokenizingIdEncoder or SentencePieceTokenizingEncoder SentencePiece
class SentencePieceTokens(override val uid: String) extends AnnotatorModel[SentencePieceTokens]
  with WriteTensorflowModel
  with HasStorageRef {
  val configProtoBytes = new IntArrayParam(this, "configProtoBytes", "ConfigProto from tensorflow, serialized into byte array. Get with config_proto.SerializeToString()")
  val task = new Param[String](this, "task", "set to 'encode' or 'decode' . Wether to ENCODE raw strings to tokends and ids or DECODE ids tos trings.   ")
  private var _model: Option[Broadcast[TensorflowSentencePiece]] = None

  def this() = this(Identifiable.randomUID("SENTENCE_PIECE_TOKENS"))


  def setConfigProtoBytes(bytes: Array[Int]): SentencePieceTokens.this.type = set(this.configProtoBytes, bytes)

  /** Function used to set the embedding output layer of the Sentence Piece model
    * encode: Encode the Raw input strings. Output Columns will contain the ids for the tokens and the lengt of each token sequence.
    * Resulting sequences might be longer because of tokenization optimization.
    * decode: Decode int32 ids back into their raw string representation
    *
    * @param task task specification
    */
  def setTask(task: String): this.type = {
    task match {
      case "encode" => set(task, "encode")
      case "decode" => set(task, "decode")

      case _ => throw new MatchError("poolingLayer must be either encode or decode")
    }
  }

  def setModelIfNotSet(spark: SparkSession, tensorflow: TensorflowWrapper): this.type = {
    if (_model.isEmpty) {

      _model = Some(
        spark.sparkContext.broadcast(
          new TensorflowSentencePiece(
            tensorflow,
            batchSize = 1,
            configProtoBytes = getConfigProtoBytes
          )
        )
      )
    }

    this
  }

  /**
    * Tokenize a sequence of annotations containing raw sentences and map them to their corrosponding ID's in the dictionary
    *
    * @param annotations Annotations that correspond to inputAnnotationCols generated by previous annotators if any
    * @return any number of annotations processed for every input annotation. Not necessary one to one relationship
    */
  def encode(annotations: Seq[Annotation]): Seq[WordpieceTokenizedSentence] = {
    print("Doing tokenization")

    val sentences = annotations.map(annotation =>
      annotation.result
    )

    getModelIfNotSet.calculateTokensAndIds(sentences)
  }

  def decode(sentenceIds: Seq[Seq[Int]]): Seq[WordpieceTokenizedSentence] = {

    getModelIfNotSet.getTokensForIds(sentenceIds)


  }


  def getModelIfNotSet: TensorflowSentencePiece = _model.get.value

  override def onWrite(path: String, spark: SparkSession): Unit = {
    super.onWrite(path, spark)
    writeTensorflowModel(path, spark, getModelIfNotSet.tensorflow, "_sentence_piece", SentencePieceTokens.tfFile, configProtoBytes = getConfigProtoBytes, isStatic = true)
  }

  def getConfigProtoBytes: Option[Array[Byte]] = get(this.configProtoBytes).map(_.map(_.toByte))

  override def copy(extra: ParamMap): SentencePieceTokens = {
    this
  } // todo this is inherited by annotator
  /**
    * takes a document and annotations and produces new annotations of this annotator's annotation type
    *
    * @param annotations Annotations that correspond to inputAnnotationCols generated by previous annotators if any
    * @return any number of annotations processed for every input annotation. Not necessary one to one relationship
    */
  override def annotate(annotations: Seq[Annotation]): Seq[Annotation] = Seq[Annotation]() // cant remove this because Annotator Trait requires it

  /** Annotator reference id. Used to identify elements in metadata or to refer to this annotator type */
  override val inputAnnotatorTypes: Array[String] = Array(AnnotatorType.DOCUMENT)
  override val outputAnnotatorType: AnnotatorType = AnnotatorType.TOKEN
}

trait ReadablePretrainedSentencePieceModel extends ParamsAndFeaturesReadable[SentencePieceTokens] with HasPretrained[SentencePieceTokens] {
  override val defaultModelName: Some[String] = Some("sentence_piece")

  /** Java compliant-overrides */
  override def pretrained(): SentencePieceTokens = super.pretrained()

  override def pretrained(name: String): SentencePieceTokens = super.pretrained(name)

  override def pretrained(name: String, lang: String): SentencePieceTokens = super.pretrained(name, lang)

  override def pretrained(name: String, lang: String, remoteLoc: String): SentencePieceTokens = super.pretrained(name, lang, remoteLoc)
}

trait ReadSentencePieceTensorflowModel extends ReadTensorflowModel {
  this: ParamsAndFeaturesReadable[SentencePieceTokens] =>

  override val tfFile: String = "sentence_piece_tensorflow"

  def readTensorflow(instance: SentencePieceTokens, path: String, spark: SparkSession): Unit = {
    // This model has NO WEIGHTS and NO VARIABLES. Thats why we call it a static graph and do not load variables while initializing. Loading variables will cause Exceptions.
    val tf = readTensorflowModel(path, spark, "_sentence_piece_tf", isStaticGraph = true)
    instance.setModelIfNotSet(spark, tf)
  }

  addReader(readTensorflow)

  def loadSavedModel(folder: String, soOperationsPath: String, spark: SparkSession): SentencePieceTokens = {

    val f = new File(folder)
    val savedModel = new File(folder, "saved_model.pb")
    require(f.exists, s"Folder $folder not found")
    require(f.isDirectory, s"File $folder is not folder")
    require(
      savedModel.exists(),
      s"savedModel file saved_model.pb not found in folder $folder"
    )

    // this model is a STATIC graph and requires loading with custom ops!
    val wrapper = TensorflowWrapper.readWithCustomOps(folder, zipped = false, useBundle = true, tags = Array("serve"), initAllTables = true, soOperationsPath)
    print("Making model")

    val SentencePieceTokens = new SentencePieceTokens()
      .setModelIfNotSet(spark, wrapper)

    print("got model")
    SentencePieceTokens
  }
}


object SentencePieceTokens extends ReadablePretrainedSentencePieceModel with ReadSentencePieceTensorflowModel
